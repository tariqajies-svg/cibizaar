<?php
/**
 * This file is part of the Magebit/bizaar design package.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade to newer
 * versions in the future.
 *
 * @copyright Copyright (c) 2022 Magebit, Ltd. (https://magebit.com/)
 * @author Magebit <info@magebit.com>
 * @license MIT
 */

declare(strict_types=1);

use Hyva\Theme\ViewModel\ReCaptcha;
use Magebit\HyvaAheadworksCa\Block\Company\Form;
use Magento\Framework\Escaper;

/** @var Form $block */
/** @var Escaper $escaper */
?>

<script>
    function initEditForm() {
        const JsLayout = JSON.parse('<?= $escaper->escapeJs($block->getJsLayout()) ?>');
        const dictionaries = JsLayout.components.awCaCompanyProvider.dictionaries;

        return {
            errors: 0,
            saveUrl: '',
            isLoading: false,
            fieldsets: {},
            formData: {},

            getComponentData: function () {
                this.saveUrl = JsLayout.components.awCaCompanyProvider.clientConfig.urls.save;

                // Collecting fields from xml file
                this.fieldsets = Object.values(JsLayout.components.awCaForm.children).map(fieldset => {
                    if (fieldset.children && fieldset.component === 'Magento_Ui/js/form/components/fieldset') {
                        for (let i in fieldset.children) {

                            if (fieldset.children[i].component) {
                                // Prepare scope and values
                                let dataScope = fieldset.children[i].dataScope.split('.'),
                                    val = '';

                                if (fieldset.dataScope.split('.').length === 2) {
                                    dataScope.unshift(fieldset.dataScope.split('.')[1]);
                                }

                                // Give children a name
                                fieldset.children[i].name = '';
                                dataScope.forEach((slug, k) => {
                                    fieldset.children[i].name += k === 0 ? slug : '[' + slug + ']';
                                });

                                // Populate with values
                                fieldset.children[i].val = val;
                                this.formData[fieldset.children[i].name] = val;

                                // If element type is select - add options
                                if (fieldset.children[i].elementTmpl === 'ui/form/element/select') {
                                    if (dictionaries[fieldset.children[i].dataScope]) {
                                        if (fieldset.children[i].dataScope === 'region_id') {
                                            fieldset.children[i].options = dictionaries[fieldset.children[i].dataScope]
                                                .filter(item => !!this.formData['company[country_id]'] &&  item.country_id === this.formData['company[country_id]']);
                                        } else {
                                            fieldset.children[i].options = dictionaries[fieldset.children[i].dataScope];
                                            if (fieldset.children[i].dataScope === 'country_id') {
                                                if (fieldset.children[i].options[0].value === '') {
                                                    // If first value already is empty change label
                                                    fieldset.children[i].options[0].label = '<?= $escaper->escapeHtmlAttr(__('Select country')) ?>'
                                                } else {
                                                    // Otherwise just add new placeholder option at start
                                                    fieldset.children[i].options.unshift({
                                                        label: '<?= $escaper->escapeHtmlAttr(__('Select country')) ?>',
                                                        value: ''
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                // Delete empty elements
                                delete fieldset.children[i];
                            }
                        }
                        fieldset.children = Object.values(fieldset.children);
                    }

                    return fieldset;
                });
            },

            // Sort field by sort order attribute
            getSortingFields: function (fields) {
                let fieldsValues = Object.values(fields);

                fieldsValues.sort(function (a, b) {
                    var keyA = new Date(parseInt(a.sortOrder)),
                        keyB = new Date(parseInt(b.sortOrder));

                    if (keyA < keyB) {
                        return -1;
                    }
                    if (keyA > keyB) {
                        return 1;
                    }
                    return 0;
                });

                return fieldsValues;
            },

            // Change value
            changeValue: function (event) {
                this.formData[event.target.name] = event.target.value;

                if (event.target.name === 'company[country_id]') {
                    this.updateRegionList(event.target.value);
                }
            },

            updateRegionList: function(country_id) {
                let baseIndex, regionIndex;

                this.fieldsets.forEach((data, index) => {
                    if (data.children && Array.isArray(data.children)) {
                        const i = data.children.findIndex(item => item.dataScope === 'region_id');
                        if (i >= 0) {
                            baseIndex = index;
                            regionIndex = i;
                        }
                    }
                });

                if (baseIndex && regionIndex) {
                    const options = dictionaries.region_id
                        .filter(item => item.country_id === country_id || (!!country_id && item.value === ''));
                    this.fieldsets[baseIndex].children[regionIndex].options = options.length > 1 ? options : [];
                }
            },

            // Submit form
            submitForm: function () {
                this.isLoading = true;
                const $form = this.$refs['registration-form'];
                <?= /** @noEscape */ $block->getChildHtml(ReCaptcha::RECAPTCHA_SCRIPT_TOKEN_BLOCK); ?>
                const self = this;
                this.validate().then(() => {
                    if (self.errors === 0) {
                        const formKey = document.querySelector('input[name=form_key]').value;
                        const dataForm = new FormData($form);
                        let data = {};
                        let request_data = '';

                        for (let [name, value] of dataForm) {
                            data[name] = value;
                        }

                        for (let fieldName in data) {
                            if (request_data) {
                                request_data += '&'
                            }
                            request_data += fieldName + '=' + encodeURIComponent(data[fieldName]);
                        }

                        request_data += '&formKey=' + encodeURIComponent(formKey);

                        fetch(this.saveUrl, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: request_data
                        }).then(response => {
                            return response
                        }).then(data => {
                            if (data.errors) {
                                this.isLoading = false;
                                dispatchMessages([{
                                    type: 'error',
                                    text: data.message
                                }], 5000);
                            } else {
                                window.location.href = data.url
                            }
                        });
                    }
                }).catch((invalid) => {
                    this.isLoading = false;
                    if (invalid.length > 0) {
                        invalid[0].focus();
                    }
                });
            },

            // Convert KO validations into Hyva validations
            getValidation(field) {
                const validation = {};

                for (const [key, value] of Object.entries(field.validation)) {
                    switch (key) {
                        case 'required-entry':
                            if (value !== false) {
                                validation.required = value;
                            }
                            break;
                        case 'validate-email':
                        case 'aw-ca-validate-email':
                            if (value !== false) {
                                validation.email = value;
                            }
                            break;
                        default:
                            validation[key] = value;
                    }
                }

                return JSON.stringify(validation);
            },

            // Check if field is required
            isRequired(field) {
                return field.validation?.['required-entry']
            }
        }
    }
</script>
<section class="mt-2 md:mt-0">
    <div class="block form login-card">
        <form id="editform"
              x-data="{...initEditForm(), ...hyva.formValidation($el, {fieldWrapperClassName: 'field-preserved'})}"
              x-init="getComponentData()"
              method="post"
              x-ref="registration-form"
              @submit.prevent="submitForm();"
              class="w-full"
        >
            <div class="fieldset-wrapper">
                <template x-for="[f, fieldset] of Object.entries(fieldsets)">
                    <div class="fieldset-block">
                        <template x-if="fieldset.template === 'Aheadworks_Ca/form/element/fieldset'">
                            <fieldset class="fieldset border-b border-container-lighter mb-5 lg:mb-12 lg:pb-4.75">
                                <div class="fieldset-wrapper-title text-black font-normal text-xl">
                                    <h3 x-html="fieldset.label"></h3>
                                </div>
                                <div class="grid grid-cols-1 lg:gap-x-7 sm:grid-cols-2 md:grid-cols-1 lg:grid-cols-2">
                                    <template x-for="field of getSortingFields(fieldset.children)">
                                        <div
                                            class="field field-preserved"
                                            :class="{'required' : isRequired(field)}"
                                            :key="field.name"
                                        >
                                            <div>
                                                <label x-html="field.label" :for="field.name"></label>
                                                <div class="control">
                                                    <template x-if="field.elementTmpl === 'ui/form/element/select'">
                                                        <select class="form-select w-full" :id="field.name"
                                                                :name="field.name"
                                                                :disabled="!field.options.length"
                                                                x-model="formData[field.name]"
                                                                x-on:change="changeValue($event)"
                                                                :data-validate='getValidation(field)'
                                                        >
                                                            <template
                                                                    x-for="[k, option] of Object.entries(field.options)">
                                                                <option
                                                                        :title="option.label"
                                                                        :key="option.value"
                                                                        x-bind:selected="option.value === field.val || field.default"
                                                                        :value="option.value"
                                                                        x-html="option.label"
                                                                ></option>
                                                            </template>
                                                        </select>
                                                    </template>
                                                    <template
                                                            x-if="field.elementTmpl === 'Aheadworks_Ca/form/element/validated-email'">
                                                        <input
                                                            :readonly="field.disabled"
                                                            class="form-input w-full"
                                                            :id="field.name"
                                                            :placeholder="field.placeholder"
                                                            :name="field.name"
                                                            type="email"
                                                            x-model="formData[field.name]"
                                                            :data-validate='getValidation(field)'
                                                        />
                                                    </template>
                                                    <div>
                                                        <template x-if="!field.elementTmpl">
                                                            <input
                                                                :readonly="field.disabled"
                                                                class="form-input w-full"
                                                                :id="field.name"
                                                                :placeholder="field.placeholder"
                                                                :name="field.name"
                                                                :x-ref="field.name"
                                                                x-model="formData[field.name]"
                                                                type="text"
                                                                :data-validate='getValidation(field)'
                                                            />
                                                        </template>
                                                    </div>
                                                </div>
                                            </div>
                                    </template>
                                </div>
                            </fieldset>
                        </template>
                        <template x-if="fieldset.component === 'Magento_Ui/js/form/components/button'">
                            <div class="flex">
                                <button type="submit"
                                        class="btn btn-primary w-full md:w-auto">
                                    <span x-html="fieldset.title"></span>
                                </button>
                            </div>
                        </template>
                    </div>
                </template>
            </div>
            <?= /** @noEscape */ $block->getBlockHtml(ReCaptcha::RECAPTCHA_INPUT_FIELD_BLOCK) ?>
            <?= /** @noEscape */ $block->getChildHtml('company_loading') ?>
        </form>
    </div>
</section>
