<?php
/**
 * This file is part of the Magebit/bizaar design package.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade to newer
 * versions in the future.
 *
 * @copyright Copyright (c) 2023 Magebit, Ltd. (https://magebit.com/)
 * @author Magebit <info@magebit.com>
 * @license MIT
 */

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\ReCaptcha;
use Magento\Framework\Escaper;
use Hyva\Theme\ViewModel\StoreConfig;
use Magento\Framework\View\Element\Template;

/** @var Template $block */
/** @var Escaper $escaper */
/** @var ViewModelRegistry $viewModels */

/** @var StoreConfig $storeConfig */
$storeConfig = $viewModels->require(StoreConfig::class);

$siteKey = $storeConfig->getStoreConfig('recaptcha_frontend/type_recaptcha_v3/public_key');

if (!$siteKey) {
    // No v3 google API credentials configured
    return;
}

$parentBlock = $block->getParentBlock();
$action = is_object($parentBlock) && $parentBlock->getNameInLayout()
    ? $parentBlock->getNameInLayout()
    : 'submit';
$action = str_replace('.', '_', $action);

$recaptcha  = $viewModels->require(ReCaptcha::class);
$formId     = $block->getData('form_id') ?? '';
?>
<?php // render_script_tag is never set, it is present to force editors to see the code as JavaScript ?>
<?php if ($block->getData('render_script_tag')): ?>
<script>
    <?php endif; ?>
    if (!this.hasCaptchaToken) {
        this.errors = 1;

        const executeGreCaptcha = () => {
            grecaptcha.ready(() => {
                grecaptcha.execute(
                    '<?= $escaper->escapeJs($siteKey) ?>',
                    {action: '<?= $escaper->escapeJs($action) ?>'},
                ).then((token) => {
                    if (token && token.length > 0) {
                        $form['<?= $escaper->escapeJs($recaptcha->getResultTokenFieldName($formId)) ?>'].value = token;
                        this.errors = 0;
                        this.hasCaptchaToken = 1;
                        (this.submitForm || $form.submit).call(this);
                    } else {
                        this.errors = 1;
                        const error = '<?= $escaper->escapeJs(__('ReCaptcha validation failed, please try again')) ?>';
                        if (this.setErrorMessages) {
                            this.setErrorMessages([error]);
                            this.displayErrorMessage = true;
                        } else {
                            window.dispatchMessages && window.dispatchMessages([{type: 'error', text: error}], 5000);
                        }
                    }
                });
            });
        };

        if (window.grecaptcha) {
            executeGreCaptcha();
        } else {
            const recaptchaUrl = "https://www.google.com/recaptcha/api.js?render=<?= $escaper->escapeJs($siteKey) ?>";
            const script = document.createElement('script');
            script.setAttribute('type', 'text/javascript');
            script.setAttribute('src', recaptchaUrl);
            document.head.appendChild(script);

            script.addEventListener('load', executeGreCaptcha, false);
        }
    }
    <?php if ($block->getData('render_script_tag')): ?>
</script>
<?php endif; ?>
