<?php
/**
 * This file is part of the Magebit_HyvaAheadworksQuickOrder package.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magebit_HyvaAheadworksQuickOrder
 * to newer versions in the future.
 *
 * @copyright Copyright (c) 2023 Magebit, Ltd. (https://magebit.com/)
 * @author    Magebit <info@magebit.com>
 * @license   MIT
 */

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\ProductStockItem;
use Magebit\HyvaAheadworksQuickOrder\ViewModel\Config;
use Magento\Framework\Escaper;
use Magento\Ui\Block\Wrapper;

/** @var Wrapper $block */
/** @var Escaper $escaper */
/** @var Config $viewModel */
/** @var ViewModelRegistry $viewModels */

$viewModel = $block->getData('view_model');
$config = $viewModel->getConfig();

/** @var ProductStockItem $stockItemViewModel */
$stockItemViewModel = $viewModels->require(ProductStockItem::class);
?>

<script>
    function initContainer() {
        return {
            ...hyva.modal(),
            namespace: 'aw_quick_order_item_listing',
            configFormId: 'quick-order-configuration-form',
            sorting: {
                dir: 'DESC',
                field: 'product_name'
            },
            items: [],
            configureData: {
                attributes: []
            },
            pagination: {
                totalRecords: 0,
                currentPage: 1,
                totalPages: 1,
                itemsPerPage: 10
            },
            pages: [],
            countPagesBeforeAndAfterCurrent: 2,
            counterText: '',
            pagerFrameSize: 10,
            isLoading: false,
            getRequestData(data) {
                const formKey = hyva.getFormKey();
                let request_data = '';
                for (const key in data) {
                    if (request_data) {
                        request_data += '&';
                    }

                    request_data += key + '=' + encodeURIComponent(data[key]);
                }

                request_data += '&formKey=' + encodeURIComponent(formKey);

                return request_data;
            },
            getItems() {
                this.isLoading = true;
                const data = {
                    namespace: {
                        key: 'namespace',
                        value: this.namespace
                    },
                    pageSize: {
                        key: 'paging[pageSize]',
                        value: this.pagination.itemsPerPage
                    },
                    current: {
                        key: 'paging[current]',
                        value: this.pagination.currentPage
                    }
                }

                let request_data = {};
                for (let i in data) {
                    request_data[data[i].key] = data[i].value;
                }

                fetch('<?= $escaper->escapeUrl($block->getUrl('mui/index/render')) ?>?'  + new URLSearchParams(request_data).toString(), {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json, text/javascript, */*; q=0.01'
                        }
                    }
                ).then(response => {
                        return response.json()
                    }
                ).then(data => {
                    if (data.errors) {
                        dispatchMessages([{
                            type: 'error',
                            text: data.message
                        }], 5000);
                    } else {
                        this.pagination.totalRecords = data.totalRecords;
                        this.pagination.totalPages = Math.ceil(data.totalRecords / this.pagination.itemsPerPage)
                        this.sortItems(data.items);
                        this.getPagination()
                        this.setCounterText();
                    }
                    this.isLoading = false;
                });
            },
            sortItems(items) {
                items.sort((a, b) => {
                    if (this.sorting.field === 'product_qty') {
                        a[this.sorting.field] = parseFloat(a[this.sorting.field]);
                        b[this.sorting.field] = parseFloat(b[this.sorting.field]);
                    }

                    if (a[this.sorting.field] < b[this.sorting.field]) {
                        return this.sorting.dir === 'DESC' ? -1 : 1;
                    } else if (a[this.sorting.field] > b[this.sorting.field]) {
                        return this.sorting.dir === 'DESC' ? 1 : -1;
                    }
                    return 0;
                });

                this.items = items;
            },
            changeSorting(field) {
                if (this.sorting.field === field) {
                    this.sorting.dir = this.sorting.dir === 'DESC' ? 'ASC' : 'DESC';
                } else {
                    this.sorting = {
                        field,
                        dir: 'DESC'
                    };
                }
                this.sortItems(this.items);
            },
            updateQty(itemData, qty) {
                const data = {
                    'item_key': itemData.item_key,
                    'product_qty': qty,
                }
                this.sendRequest('<?= $escaper->escapeUrl($config['updateQtyUrl']) ?>', data)
                .then(() => {
                    this.getItems()
                });
            },
            deleteItem(itemData) {
                const data = {
                    item_key: itemData.item_key
                };

                this.sendRequest('<?= $escaper->escapeUrl($config['removeItemUrl']) ?>', data)
                .then((response) => {
                    this.getItems();
                    return response.json();
                }).then(json => {
                    if (json.success_messages) {
                        dispatchMessages(json.success_messages, 2000);
                    } else if (json.error_messages) {
                        dispatchMessages(json.error_messages, 2000);
                    }
                })
            },
            sendRequest(url, data) {
                return fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: this.getRequestData(data)
                });
            },
            addToCart() {
                hyva.postForm({
                    action: '/aw_quick_order/quickOrder/addToCart/',
                    data: {
                        action_type: 'add_to_cart'
                    }
                });
            },
            resetList() {
                hyva.postForm({
                    action: '/aw_quick_order/quickOrder/resetList/',
                    data: {
                        action_type: 'reset_list'
                    }
                });
            },
            changePageSize() {
                this.pagination.itemsPerPage = this.$refs.limiter.value;
                this.getItems();
            },
            setPageNumber(pageNumber) {
                this.pagination.currentPage = pageNumber;
                this.getItems();
            },
            getPagination() {
                let currentPage = this.pagination.currentPage;
                let countPages = this.pagination.totalPages;
                let pages = [];

                for (let i = 1; i <= countPages; i++) {
                    if (i === 1) {
                        let pageData = {
                            pageNumber: this.pagination.currentPage - 1,
                            currentPage: false,
                            pageLabel: '<i class="icon icon-arrow-left text-sm lg:text-base leading-none"></i>',
                            btnType: 'arrow',
                            arrowType: 'first',
                            disabled: false
                        }

                        if (currentPage === 1) {
                            pageData.disabled = true;
                        }
                        pages.push(pageData)
                    }

                    if (
                        (currentPage < this.countPagesBeforeAndAfterCurrent + 1 && i < this.pagerFrameSize + 1) ||
                        (currentPage > countPages - this.countPagesBeforeAndAfterCurrent && i > countPages - this.pagerFrameSize) ||
                        (i >= currentPage && i <= currentPage + this.countPagesBeforeAndAfterCurrent) ||
                        (i <= currentPage && i >= currentPage - this.countPagesBeforeAndAfterCurrent)
                    ) {
                        let pageData = {
                            pageNumber: i,
                            currentPage: false,
                            pageLabel: i,
                            btnType: 'simpleButton',
                            arrowType: false,
                            disabled: false
                        };
                        if (i === currentPage) {
                            pageData.currentPage = true;
                            pageData.disabled = true;
                        }
                        pages.push(pageData)
                    }

                    if (i === countPages) {
                        let pageData = {
                            pageNumber: this.pagination.currentPage + 1,
                            currentPage: false,
                            pageLabel: '<i class="icon icon-arrow-right text-sm lg:text-base leading-none"></i>',
                            btnType: 'arrow',
                            arrowType: 'last',
                            disabled: false
                        }

                        if (currentPage === countPages) {
                            pageData.disabled = true;
                        }
                        pages.push(pageData)
                    }
                }

                this.pages = pages;
            },
            configureItem(itemData) {
                this.isLoading = true;
                this.sendRequest('<?= $escaper->escapeUrl($config['configureUrl']) ?>', {
                    item_key: itemData.item_key
                }).then(response => response.json())
                    .then(json => {
                        this.configureData = {
                            ...json,
                            itemData,
                            ...initConfigurableOptions(
                                json.productId,
                                JSON.parse(json.jsonConfig)
                            ),
                            ...initSwatchOptions(
                                JSON.parse(json.jsonSwatchConfig)
                            )
                        }
                        this.configureData.findAllowedAttributeOptions();
                        this.configureData.showSwatches = true
                        // Just get some image to show initially
                        const image = this.configureData.optionConfig.images[Object.keys(this.configureData.optionConfig.images)[0]]
                        window.dispatchEvent(new CustomEvent(
                            "update-gallery",
                            { detail: image }
                        ));
                        this.isLoading = false;
                        this.show('popup-configure');
                    });
            },
            updateConfiguration() {
                this.validate().then(() => {
                     const $form = document.getElementById(this.configFormId);
                     const dataForm = new FormData($form);
                     let data = {
                         ['item_key']: this.configureData.itemData.item_key,
                         product: this.configureData.productId
                     };

                     for (let [name, value] of dataForm) {
                         data[name] = value;
                     }

                    this.sendRequest('<?= $escaper->escapeUrl($config['updateItemOptionUrl'])?>', data).then((response) => {
                        this.getItems();
                        this.hide('popup-configure');
                        return response.json();
                    }).then(json => {
                        if (json.success_messages) {
                            dispatchMessages(json.success_messages, 2000);
                        } else if (json.error_messages) {
                            dispatchMessages(json.error_messages, 2000);
                        }
                    })
                }).catch((invalid) => {
                    if (invalid.length > 0) {
                        invalid[0].focus();
                    }
                });
            },
            setCounterText() {
                let pageSize = this.pagination.itemsPerPage;
                let totalRecords = this.pagination.totalRecords;
                let currentPage = this.pagination.currentPage;
                let pageCount = this.pagination.totalPages;

                this.counterText = '<?= $escaper->escapeHtml(__('Items')) ?>'
                    + ' '
                    + (totalRecords ? (1 + (pageCount > 1 ? (pageSize * (currentPage - 1)) : 0)) : 0)
                    + ' - '
                    + (pageSize * currentPage > totalRecords ? totalRecords : (pageSize * currentPage))
                    + ' '
                    + '<?= $escaper->escapeHtml(__('of')) ?>'
                    + ' '
                    + totalRecords;
            },
        }
    }
</script>

<div
    class="quick-order-content mt-1.25 lg:mt-0"
    x-data="{...hyva.modal(), ...initContainer(), ...hyva.formValidation(document.getElementById('quick-order-configuration-form'))}"
    x-init="getItems()"
    @qo-get-items.window="getItems()"
    @qo-configure-item.window="configureItem($event.detail)"
>
    <?= $block->getChildHtml(); ?>
</div>
